{"mappings":"A,C,KEIA,IAAM,EAA2B,CAE7B,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC5D,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC/D,CAEK,EAA2B,CAE7B,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC5D,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC/D,CAEK,EAAyB,CAE3B,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAChD,CAEK,EAA0B,CAE5B,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACjE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC/D,CA8DD,SAAS,gBAAA,CAAiB,mBAAoB,KAC1C,IAAM,EAAsB,SAAS,cAAA,CAAe,mBAC9C,EAAyB,SAAS,cAAA,CAAe,mBACjD,EAAyB,SAAS,cAAA,CAAe,mBACjD,EAA2B,SAAS,cAAA,CAAe,qBACnD,EAA2B,SAAS,cAAA,CAAe,qBACnD,EAAiB,SAAS,cAAA,CAAe,mBACzC,EAA4B,SAAS,cAAA,CAAe,sBAGpD,EAAuB,SAAS,cAAA,CAAe,mBAC/C,EAAgB,SAAS,cAAA,CAAe,kBAE1C,GAAwB,GACxB,EAAqB,gBAAA,CAAiB,QAAS,KAC3C,IAAM,EAAiB,CAAC,EAAqB,KAA7C,AACA,CAAA,EAAc,WAAA,CAAc,EAAe,QAA3C,EACJ,GAIA,GACA,GACA,GACA,GACA,GACA,GACA,GAEA,EAAe,gBAAA,CAAiB,QAAS,KACrC,IAAM,EAAiB,CAAC,EAAoB,KAA5C,CACM,EAAiB,EAAuB,OAA9C,CACM,EAAiB,EAAuB,OAA9C,CACM,EAAmB,EAAyB,OAAlD,CACM,EAAmB,EAAyB,OAAlD,CAEM,EAAoB,AA5EtC,SACI,CAAuB,CACvB,CAAuB,CACvB,CAAyB,CACzB,CAAyB,CACzB,CAAsB,EAGtB,QAAQ,GAAA,CAAI,0BAEZ,IAAI,EAAuB,EAAE,CAc7B,GAbG,GACC,CAAA,EAAa,EAAW,MAAA,CAAO,EADnC,EAGG,GACC,CAAA,EAAa,EAAW,MAAA,CAAO,EADnC,EAGG,GACC,CAAA,EAAa,EAAW,MAAA,CAAO,EADnC,EAGG,GACC,CAAA,EAAa,EAAW,MAAA,CAAO,EADnC,EAIG,AAAsB,IAAtB,EAAW,MAAA,CACV,MAAO,GAGX,IAAI,EAAoB,GAExB,IAAI,IAAI,EAAI,EAAG,EAAI,EAAgB,IAAI,CACnC,IAAM,EAnCH,KAAK,KAAA,CAFU,AADF,KAAK,MAAzB,GACqC,CAAA,AAqCM,EAAW,MAAlD,CAAoC,CArCG,EAqCH,GAEpC,GAAqB,CAAU,CAAC,EAAY,AAChD,CAEA,OAAO,CACX,EAwCgB,EACA,EACA,EACA,EACA,EAGJ,CAAA,EAA0B,KAAA,CAAQ,EAClC,QAAQ,GAAA,CAAI,sBAAuB,EAEvC,EAER,E,C","sources":["<anon>","index.ts","password-generator.ts"],"sourcesContent":["(() => {\n// Simple project to solve my problem of having to go to a random website to generate my password. \n// Made into an extension for ease of access\n// Generated with GPT\nconst $c62bdfa2b3064678$var$lowerCaseChars = [\n    // Lowercase letters\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\"\n];\nconst $c62bdfa2b3064678$var$upperCaseChars = [\n    // Uppercase letters\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\"\n];\nconst $c62bdfa2b3064678$var$numericChars = [\n    // Numeric digits\n    \"0\",\n    \"1\",\n    \"2\",\n    \"3\",\n    \"4\",\n    \"5\",\n    \"6\",\n    \"7\",\n    \"8\",\n    \"9\"\n];\nconst $c62bdfa2b3064678$var$symbolicChars = [\n    // Symbols\n    \"!\",\n    \"@\",\n    \"#\",\n    \"$\",\n    \"%\",\n    \"^\",\n    \"&\",\n    \"*\",\n    \"(\",\n    \")\",\n    \"-\",\n    \"_\",\n    \"+\",\n    \"=\",\n    \"[\",\n    \"]\",\n    \"{\",\n    \"}\",\n    \"|\",\n    \";\",\n    \":\",\n    \",\",\n    \".\",\n    \"<\",\n    \">\",\n    \"/\",\n    \"?\"\n];\n// Generation end\nlet $c62bdfa2b3064678$var$includeNumeric = true;\nlet $c62bdfa2b3064678$var$includeSymbols = true;\nlet $c62bdfa2b3064678$var$includeUpperCase = true;\nlet $c62bdfa2b3064678$var$includeLowerCase = true;\nfunction $c62bdfa2b3064678$var$getRandomNumber(min, max) {\n    const randomValue = Math.random();\n    const selectedRange = randomValue * (max - min) + min;\n    return Math.floor(selectedRange);\n}\nfunction $c62bdfa2b3064678$var$generatePassword(includeNumeric, includeSymbols, includeUpperCase, includeLowerCase, passwordLength) {\n    console.log(\"Generating password...\");\n    let validChars = [];\n    if (includeNumeric) validChars = validChars.concat($c62bdfa2b3064678$var$numericChars);\n    if (includeSymbols) validChars = validChars.concat($c62bdfa2b3064678$var$symbolicChars);\n    if (includeUpperCase) validChars = validChars.concat($c62bdfa2b3064678$var$upperCaseChars);\n    if (includeLowerCase) validChars = validChars.concat($c62bdfa2b3064678$var$lowerCaseChars);\n    if (validChars.length === 0) return \"\";\n    let generatedPassword = \"\";\n    for(let i = 0; i < passwordLength; i++){\n        const randomIndex = $c62bdfa2b3064678$var$getRandomNumber(0, validChars.length);\n        generatedPassword += validChars[randomIndex];\n    }\n    return generatedPassword;\n}\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const passwordLengthInput = document.getElementById(\"password-length\");\n    const includeNumericCheckbox = document.getElementById(\"include-numeric\");\n    const includeSymbolsCheckbox = document.getElementById(\"include-symbols\");\n    const includeUppercaseCheckbox = document.getElementById(\"include-uppercase\");\n    const includeLowercaseCheckbox = document.getElementById(\"include-lowercase\");\n    const generateButton = document.getElementById(\"generate-button\");\n    const generatedPasswordTextarea = document.getElementById(\"generated-password\");\n    // Get the slider number to display to user\n    const passwordLengthSlider = document.getElementById(\"password-length\");\n    const lengthDisplay = document.getElementById(\"length-display\");\n    if (passwordLengthSlider && lengthDisplay) passwordLengthSlider.addEventListener(\"input\", ()=>{\n        const passwordLength = +passwordLengthSlider.value;\n        lengthDisplay.textContent = passwordLength.toString();\n    });\n    if (passwordLengthInput && includeNumericCheckbox && includeSymbolsCheckbox && includeUppercaseCheckbox && includeLowercaseCheckbox && generateButton && generatedPasswordTextarea) generateButton.addEventListener(\"click\", ()=>{\n        const passwordLength = +passwordLengthInput.value;\n        const includeNumeric = includeNumericCheckbox.checked;\n        const includeSymbols = includeSymbolsCheckbox.checked;\n        const includeUppercase = includeUppercaseCheckbox.checked;\n        const includeLowercase = includeLowercaseCheckbox.checked;\n        const generatedPassword = $c62bdfa2b3064678$var$generatePassword(includeNumeric, includeSymbols, includeUppercase, includeLowercase, passwordLength);\n        generatedPasswordTextarea.value = generatedPassword;\n        console.log(\"Generated Password:\", generatedPassword);\n    });\n});\n\n\n\n})();\n//# sourceMappingURL=index.js.map\n","import './password-generator';","// Simple project to solve my problem of having to go to a random website to generate my password. \r\n// Made into an extension for ease of access\r\n\r\n// Generated with GPT\r\nconst lowerCaseChars: string[] = [\r\n    // Lowercase letters\r\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\r\n    'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\r\n];\r\n\r\nconst upperCaseChars: string[] = [\r\n    // Uppercase letters\r\n    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\r\n    'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\r\n]\r\n\r\nconst numericChars: string[] = [\r\n    // Numeric digits\r\n    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\r\n]\r\n\r\nconst symbolicChars: string[] = [\r\n    // Symbols\r\n    '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '+', '=',\r\n    '[', ']', '{', '}', '|', ';', ':', ',', '.', '<', '>', '/', '?'\r\n]\r\n// Generation end\r\n\r\n\r\nlet includeNumeric: boolean = true;\r\nlet includeSymbols: boolean = true;\r\nlet includeUpperCase: boolean = true;\r\nlet includeLowerCase: boolean = true;\r\n\r\n\r\nfunction getRandomNumber(\r\n    min: number, \r\n    max: number\r\n    ): number {\r\n\r\n    const randomValue = Math.random();\r\n    const selectedRange = randomValue * (max - min) + min;\r\n\r\n    return Math.floor(selectedRange);\r\n}\r\n\r\n\r\nfunction generatePassword(\r\n    includeNumeric: boolean,\r\n    includeSymbols: boolean,\r\n    includeUpperCase: boolean,\r\n    includeLowerCase: boolean,\r\n    passwordLength: number\r\n    ): string {\r\n    \r\n    console.log(\"Generating password...\");\r\n    \r\n    let validChars: string[] = [];\r\n    if(includeNumeric) {\r\n        validChars = validChars.concat(numericChars);\r\n    }\r\n    if(includeSymbols) {\r\n        validChars = validChars.concat(symbolicChars);\r\n    }\r\n    if(includeUpperCase) {\r\n        validChars = validChars.concat(upperCaseChars);\r\n    }\r\n    if(includeLowerCase) {\r\n        validChars = validChars.concat(lowerCaseChars);\r\n    }\r\n\r\n    if(validChars.length === 0) {\r\n        return \"\";\r\n    }\r\n\r\n    let generatedPassword = \"\";\r\n\r\n    for(let i = 0; i < passwordLength; i++){\r\n        const randomIndex = getRandomNumber(0, validChars.length);\r\n\r\n        generatedPassword += validChars[randomIndex];\r\n    }\r\n\r\n    return generatedPassword;\r\n}\r\n\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n    const passwordLengthInput = document.getElementById(\"password-length\") as HTMLInputElement;\r\n    const includeNumericCheckbox = document.getElementById(\"include-numeric\") as HTMLInputElement;\r\n    const includeSymbolsCheckbox = document.getElementById(\"include-symbols\") as HTMLInputElement;\r\n    const includeUppercaseCheckbox = document.getElementById(\"include-uppercase\") as HTMLInputElement;\r\n    const includeLowercaseCheckbox = document.getElementById(\"include-lowercase\") as HTMLInputElement;\r\n    const generateButton = document.getElementById(\"generate-button\");\r\n    const generatedPasswordTextarea = document.getElementById(\"generated-password\") as HTMLTextAreaElement;\r\n\r\n    // Get the slider number to display to user\r\n    const passwordLengthSlider = document.getElementById(\"password-length\") as HTMLInputElement;\r\n    const lengthDisplay = document.getElementById(\"length-display\");\r\n\r\n    if (passwordLengthSlider && lengthDisplay) {\r\n        passwordLengthSlider.addEventListener(\"input\", () => {\r\n            const passwordLength = +passwordLengthSlider.value;\r\n            lengthDisplay.textContent = passwordLength.toString();\r\n        });\r\n    }\r\n\r\n    if (\r\n        passwordLengthInput &&\r\n        includeNumericCheckbox &&\r\n        includeSymbolsCheckbox &&\r\n        includeUppercaseCheckbox &&\r\n        includeLowercaseCheckbox &&\r\n        generateButton &&\r\n        generatedPasswordTextarea\r\n    ) {\r\n        generateButton.addEventListener(\"click\", () => {\r\n            const passwordLength = +passwordLengthInput.value;\r\n            const includeNumeric = includeNumericCheckbox.checked;\r\n            const includeSymbols = includeSymbolsCheckbox.checked;\r\n            const includeUppercase = includeUppercaseCheckbox.checked;\r\n            const includeLowercase = includeLowercaseCheckbox.checked;\r\n\r\n            const generatedPassword = generatePassword(\r\n                includeNumeric,\r\n                includeSymbols,\r\n                includeUppercase,\r\n                includeLowercase,\r\n                passwordLength\r\n            );\r\n\r\n            generatedPasswordTextarea.value = generatedPassword;\r\n            console.log(\"Generated Password:\", generatedPassword);\r\n\r\n        });\r\n    }\r\n});"],"names":["$c62bdfa2b3064678$var$lowerCaseChars","$c62bdfa2b3064678$var$upperCaseChars","$c62bdfa2b3064678$var$numericChars","$c62bdfa2b3064678$var$symbolicChars","document","addEventListener","passwordLengthInput","getElementById","includeNumericCheckbox","includeSymbolsCheckbox","includeUppercaseCheckbox","includeLowercaseCheckbox","generateButton","generatedPasswordTextarea","passwordLengthSlider","lengthDisplay","passwordLength","value","textContent","toString","includeNumeric","checked","includeSymbols","includeUppercase","includeLowercase","generatedPassword","$c62bdfa2b3064678$var$generatePassword","includeUpperCase","includeLowerCase","console","log","validChars","concat","length","i","randomIndex","Math","floor","randomValue","random","max"],"version":3,"file":"index.js.map"}